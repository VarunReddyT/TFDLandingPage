{"version":3,"file":"static/js/40.91df42fa.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/scene/container/bounds/getFastGlobalBounds.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/batchSamplersUniformGroup.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts","../node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontTextParser.ts","../node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontXMLParser.ts","../node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontXMLStringParser.ts","../node_modules/pixi.js/src/scene/text-bitmap/asset/loadBitmapFont.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","../node_modules/pixi.js/src/scene/text-html/HtmlTextStyle.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/scene/text/canvas/utils/getCanvasFillStyle.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts"],"sourcesContent":["import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPluginOptions}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\n// eslint-disable-next-line max-len\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n// TODO could we cache local bounds on the render groups?\n\nconst tempMatrix = new Matrix();\n\n/**\n * Does exactly the same as getGlobalBounds, but does instead makes use of transforming AABBs\n * of the various children within the scene graph. This is much faster, but less accurate.\n *\n * the result will never be smaller - only ever slightly larger (in most cases, it will be the same).\n * @param target - The target container to get the bounds from\n * @param bounds - The output bounds object.\n * @returns The bounds.\n */\nexport function getFastGlobalBounds(target: Container, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    _getGlobalBoundsRecursive(target, bounds);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    if (!target.isRenderGroupRoot)\n    {\n        bounds.applyMatrix(target.renderGroup.worldTransform);\n    }\n    else\n    {\n        bounds.applyMatrix(target.renderGroup.localTransform);\n    }\n\n    return bounds;\n}\n\nexport function _getGlobalBoundsRecursive(\n    target: Container,\n    bounds: Bounds,\n)\n{\n    if (target.localDisplayStatus !== 0b111 || !target.measurable)\n    {\n        return;\n    }\n\n    const manageEffects = !!target.effects.length;\n\n    let localBounds = bounds;\n\n    if (target.isRenderGroupRoot || manageEffects)\n    {\n        localBounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, target.worldTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            const viewBounds = (target as Renderable).bounds;\n\n            localBounds.addFrame(\n                viewBounds.minX,\n                viewBounds.minY,\n                viewBounds.maxX,\n                viewBounds.maxY,\n                target.groupTransform\n            );\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getGlobalBoundsRecursive(children[i], localBounds);\n        }\n    }\n\n    if (manageEffects)\n    {\n        let advanced = false;\n\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            if (target.effects[i].addBounds)\n            {\n                if (!advanced)\n                {\n                    advanced = true;\n                    localBounds.applyMatrix(target.renderGroup.worldTransform);\n                }\n\n                target.effects[i].addBounds(localBounds, true);\n            }\n        }\n\n        if (advanced)\n        {\n            localBounds.applyMatrix(target.renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            bounds.addBounds(localBounds, target.relativeGroupTransform);\n        }\n\n        bounds.addBounds(localBounds);\n        boundsPool.return(localBounds);\n    }\n    else if (target.isRenderGroupRoot)\n    {\n        bounds.addBounds(localBounds, target.relativeGroupTransform);\n        boundsPool.return(localBounds);\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getFastGlobalBounds } from '../scene/container/bounds/getFastGlobalBounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            location: 0,\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            getFastGlobalBounds(instruction.container, bounds);\n        }\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.rootRenderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = colorTextureSource._resolution;\n\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for any filter, it should be true\n        let antialias = colorTextureSource.antialias;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias !== 'inherit')\n            {\n                if (filter.antialias === 'on')\n                {\n                    antialias = true;\n                }\n                else\n                {\n                    antialias = false;\n                }\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired = blendRequired || filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const viewPort = renderer.renderTarget.rootViewPort;\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        // need to factor in resolutions also..\n        bounds.scale(resolution)\n            .fitBounds(0, viewPort.width, 0, viewPort.height)\n            .scale(1 / resolution)\n            .pad(padding)\n            .ceil();\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n        // eslint-disable-next-line max-len\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n","import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        renderable.addBounds(bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","import { MAX_TEXTURES } from '../../../batcher/shared/const';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst sampleValues = new Int32Array(MAX_TEXTURES);\n\nfor (let i = 0; i < MAX_TEXTURES; i++)\n{\n    sampleValues[i] = i;\n}\n\nexport const batchSamplersUniformGroup = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: MAX_TEXTURES }\n}, { isStatic: true });\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const { width, height } = canvasAndContext.canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics._didGraphicsUpdate)\n        {\n            graphics._didGraphicsUpdate = false;\n\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch.batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            // TODO pool this!!\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        graphics.on('destroyed', () =>\n        {\n            this.destroyRenderable(graphics);\n        });\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { Instruction } from '../../../rendering/renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport interface MeshInstruction extends Instruction\n{\n    renderPipeId: 'mesh';\n    mesh: Mesh;\n}\n\n// eslint-disable-next-line max-len\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<MeshInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            const texture = mesh.texture;\n\n            if (batchableMesh.texture._source !== texture._source)\n            {\n                if (batchableMesh.texture._source !== texture._source)\n                {\n                    return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, texture);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add({\n                renderPipeId: 'mesh',\n                mesh\n            } as MeshInstruction);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.texture = mesh._texture;\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh.batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n    }\n\n    public execute({ mesh }: MeshInstruction)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = mesh.groupBlendMode;\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', () =>\n        {\n            this.destroyRenderable(mesh);\n        });\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.mesh = mesh;\n        gpuMesh.texture = mesh._texture;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        gpuMesh.mesh = mesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import type { Batch, BatchableObject, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Container } from '../../container/Container';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements BatchableObject\n{\n    public indexStart: number;\n    public textureId: number;\n    public texture: Texture;\n    public location: number;\n    public batcher: Batcher = null;\n    public batch: Batch = null;\n    public mesh: Container;\n    public geometry: MeshGeometry;\n\n    public roundPixels: 0 | 1 = 0;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n    private _textureMatrixUpdateId: number = -1;\n\n    get blendMode() { return this.mesh.groupBlendMode; }\n\n    public reset()\n    {\n        this.mesh = null;\n        this.texture = null;\n        this.batcher = null;\n        this.batch = null;\n    }\n\n    public packIndex(indexBuffer: IndexBufferArray, index: number, indicesOffset: number)\n    {\n        const indices = this.geometry.indices;\n\n        for (let i = 0; i < indices.length; i++)\n        {\n            indexBuffer[index++] = indices[i] + indicesOffset;\n        }\n    }\n\n    public packAttributes(\n        float32View: Float32Array,\n        uint32View: Uint32Array,\n        index: number,\n        textureId: number\n    )\n    {\n        const mesh = this.mesh;\n\n        const geometry = this.geometry;\n        const wt = mesh.groupTransform;\n\n        const textureIdAndRound = (textureId << 16) | (this.roundPixels & 0xFFFF);\n\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        // const trim = texture.trim;\n        const positions = geometry.positions;\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        const abgr = mesh.groupColorAlpha;\n\n        for (let i = 0; i < positions.length; i += 2)\n        {\n            const x = positions[i];\n            const y = positions[i + 1];\n\n            float32View[index] = (a * x) + (c * y) + tx;\n            float32View[index + 1] = (b * x) + (d * y) + ty;\n\n            // TODO implement texture matrix?\n            float32View[index + 2] = transformedUvs[i];\n            float32View[index + 3] = transformedUvs[i + 1];\n\n            uint32View[index + 4] = abgr;\n            uint32View[index + 5] = textureIdAndRound;\n\n            index += 6;\n        }\n    }\n\n    get vertexSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const uvs = options.uvs || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const positions = this.positions;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this.width > w ? 1.0 : this.width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this.height > h ? 1.0 : this.height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        positions[9] = positions[11] = positions[13] = positions[15] = this._topHeight * scale;\n        positions[17] = positions[19] = positions[21] = positions[23] = this.height - (this._bottomHeight * scale);\n        positions[25] = positions[27] = positions[29] = positions[31] = this.height;\n\n        positions[2] = positions[10] = positions[18] = positions[26] = this._leftWidth * scale;\n        positions[4] = positions[12] = positions[20] = positions[28] = this.width - (this._rightWidth * scale);\n        positions[6] = positions[14] = positions[22] = positions[30] = this.width;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: NineSliceSprite, _instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite.batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        sprite._didSpriteUpdate = false;\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = new BatchableMesh();\n\n        batchableMesh.geometry = new NineSliceGeometry();\n\n        batchableMesh.mesh = sprite;\n\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(sprite);\n        });\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            // we are batching.. check a texture change!\n            if (batchableMesh.texture._source !== renderable.texture._source)\n\n            { return !batchableMesh.batcher.checkAndUpdateTexture(batchableMesh, renderable.texture); }\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite._didTilingSpriteUpdate)\n            {\n                tilingSprite._didTilingSpriteUpdate = false;\n\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.mesh = tilingSprite;\n                batchableMesh.texture = tilingSprite._texture;\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: State.default2d,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite._didTilingSpriteUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh.batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite._didTilingSpriteUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n\n        tilingSprite._didTilingSpriteUpdate = false;\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(tilingSprite);\n        });\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite._applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @memberof text */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @memberof text\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @memberof text\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @memberof text\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            this.chars[i].texture.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n","/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\n\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\nimport type { TextStyle } from '../text/TextStyle';\n\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @memberof text\n * @ignore\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 4;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = options;\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = resolveCharacters(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        const widthScale = style.fontStyle === 'italic' ? 2 : 1;\n        let maxCharHeight = 0;\n        let skipTexture = false;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps heigh\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = (widthScale * metrics.width) * fontScale;\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = width + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));// / 1.5;\n            }\n\n            if (currentX + paddedWidth > 512)\n            {\n                currentY += maxCharHeight;\n\n                // reset the line x and height..\n                maxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + maxCharHeight > 512)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentY = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n\n            // now add it to the font data..\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(512, 512, textureResolution);\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload'\n            }),\n\n        });\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        if (style.stroke && strokeThickness)\n        {\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (style._fill)\n        {\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n","import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\nexport function getBitmapTextLayout(chars: string[], style: TextStyle, font: AbstractBitmapFont<any>): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n        let lastChar = currentLine.chars[index];\n\n        while (lastChar === ' ')\n        {\n            currentLine.width -= font.chars[lastChar].xAdvance;\n            lastChar = currentLine.chars[--index];\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += font.lineHeight;\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord\n                && style.wordWrap\n                && (currentLine.width + currentWord.width - adjustedLetterSpacing) > adjustedWordWrapWidth;\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                if (currentLine.width !== 0)\n                {\n                    nextLine();\n                }\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill)\n        {\n            fontFamilyKey += style._fill.fill.uid;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fnt.once('destroy', () => Cache.remove(fontFamilyKey));\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     */\n    public getLayout(text: string, style: TextStyle): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout(text.split(''), style, bitmapFont);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     */\n    public measureText(text: string, style: TextStyle): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            Cache.remove(cacheKey);\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n","import { Rectangle } from '../../maths/shapes/Rectangle';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { BitmapFontManager } from './BitmapFontManager';\n\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\nimport type { BitmapFontData } from './AbstractBitmapFont';\nimport type { BitmapFontInstallOptions } from './BitmapFontManager';\n\n/**\n * Options for creating a BitmapFont.\n * @memberof text\n */\nexport interface BitmapFontOptions\n{\n    data: BitmapFontData\n    textures: Texture[]\n}\n\n/**\n * A BitmapFont object represents a particular font face, size, and style.\n * @memberof text\n */\nexport class BitmapFont extends AbstractBitmapFont<BitmapFont>\n{\n    /** the url of the font */\n    public url?: string;\n\n    constructor(options: BitmapFontOptions, url?: string)\n    {\n        super();\n\n        const { textures, data } = options;\n\n        Object.keys(data.pages).forEach((key: string) =>\n        {\n            const pageData = data.pages[parseInt(key, 10)];\n\n            const texture = textures[pageData.id];\n\n            this.pages.push({ texture });\n        });\n\n        Object.keys(data.chars).forEach((key: string) =>\n        {\n            const charData = data.chars[key];\n            const textureSource = textures[charData.page].source;\n\n            const frameReal = new Rectangle(\n                charData.x,\n                charData.y,\n                charData.width,\n                charData.height,\n            );\n\n            const texture = new Texture({\n                source: textureSource,\n                frame: frameReal\n            });\n\n            this.chars[key] = {\n                id: key.codePointAt(0),\n                xOffset: charData.xOffset,\n                yOffset: charData.yOffset,\n                xAdvance: charData.xAdvance,\n                kerning: charData.kerning ?? {},\n                texture,\n            };\n        });\n\n        this.baseRenderedFontSize = data.fontSize;\n\n        (this.baseMeasurementFontSize as number) = data.fontSize;\n        (this.fontMetrics as FontMetrics) = {\n            ascent: 0,\n            descent: 0,\n            fontSize: data.fontSize,\n        };\n        (this.baseLineOffset as number) = data.baseLineOffset;\n        (this.lineHeight as number) = data.lineHeight;\n        (this.fontFamily as string) = data.fontFamily;\n        (this.distanceField as { type: string, range: number }) = data.distanceField ?? {\n            type: 'none',\n            range: 0,\n        };\n\n        this.url = url;\n    }\n\n    /** Destroys the BitmapFont object. */\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { texture } = this.pages[i];\n\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFont, BitmapText } from 'pixi.js';\n     *\n     * BitmapFont.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public static install(options: BitmapFontInstallOptions)\n    {\n        BitmapFontManager.install(options);\n    }\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public static uninstall(name: string)\n    {\n        BitmapFontManager.uninstall(name);\n    }\n}\n","import type { BitmapFontData, RawCharData } from '../AbstractBitmapFont';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\nexport interface BitmapFontRawData\n{\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string, base: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string\n        page: string\n        xoffset: string\n        yoffset: string\n        xadvance: string,\n        x: string\n        y: string\n        width: string\n        height: string\n        letter?: string\n        char?: string\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: 'sdf' | 'msdf' | 'none';\n        distanceRange: string;\n    }[]\n}\n\nexport const bitmapFontTextParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        return typeof data === 'string' && data.startsWith('info face=');\n    },\n\n    parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: BitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontRawData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font: BitmapFontData = {\n            chars: {},\n            pages: [],\n            lineHeight: 0,\n            fontSize: 0,\n            fontFamily: '',\n            distanceField: null,\n            baseLineOffset: 0,\n        };\n\n        const [info] = rawData.info;\n        const [common] = rawData.common;\n        const [distanceField] = rawData.distanceField ?? [];\n\n        if (distanceField)\n        {\n            font.distanceField = {\n                range: parseInt(distanceField.distanceRange, 10),\n                type: distanceField.fieldType\n            };\n        }\n\n        font.fontSize = parseInt(info.size, 10);\n        font.fontFamily = info.face;\n        font.lineHeight = parseInt(common.lineHeight, 10);\n\n        const page = rawData.page;\n\n        for (let i = 0; i < page.length; i++)\n        {\n            font.pages.push({\n                id: parseInt(page[i].id, 10) || 0,\n                file: page[i].file,\n            });\n        }\n\n        const map: Record<string, string> = {};\n\n        font.baseLineOffset = font.lineHeight - parseInt(common.base, 10);\n\n        const char = rawData.char;\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const charNode = char[i];\n            const id = parseInt(charNode.id, 10);\n\n            let letter = charNode.letter ?? charNode.char ?? String.fromCharCode(id);\n\n            if (letter === 'space')letter = ' ';\n\n            map[id] = letter;\n\n            font.chars[letter] = {\n                id,\n                // texture deets..\n                page: parseInt(charNode.page, 10) || 0,\n                x: parseInt(charNode.x, 10),\n                y: parseInt(charNode.y, 10),\n                width: parseInt(charNode.width, 10),\n                height: parseInt(charNode.height, 10),\n                xOffset: parseInt(charNode.xoffset, 10),\n                yOffset: parseInt(charNode.yoffset, 10),\n                xAdvance: parseInt(charNode.xadvance, 10),\n                kerning: {},\n            } as RawCharData;\n        }\n\n        const kerning = rawData.kerning || [];\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            const first = parseInt(kerning[i].first, 10);\n            const second = parseInt(kerning[i].second, 10);\n            const amount = parseInt(kerning[i].amount, 10);\n\n            font.chars[map[second]].kerning[map[first]] = amount;\n        }\n\n        return font;\n    }\n};\n","import type { BitmapFontData, RawCharData } from '../AbstractBitmapFont';\n\nexport const bitmapFontXMLParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        const xml = data as Document;\n\n        return typeof xml !== 'string'\n            && 'getElementsByTagName' in xml\n            && xml.getElementsByTagName('page').length\n            && xml.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    },\n\n    parse(xml: Document): BitmapFontData\n    {\n        const data: BitmapFontData = {\n            chars: {},\n            pages: [],\n            lineHeight: 0,\n            fontSize: 0,\n            fontFamily: '',\n            distanceField: null,\n            baseLineOffset: 0,\n        };\n\n        const info = xml.getElementsByTagName('info')[0];\n        const common = xml.getElementsByTagName('common')[0];\n        const distanceField = xml.getElementsByTagName('distanceField')[0];\n\n        if (distanceField)\n        {\n            data.distanceField = {\n                type: distanceField.getAttribute('fieldType') as 'sdf' | 'msdf' | 'none',\n                range: parseInt(distanceField.getAttribute('distanceRange'), 10),\n            };\n        }\n\n        // pages and chars:\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n\n        data.fontSize = parseInt(info.getAttribute('size'), 10);\n        data.fontFamily = info.getAttribute('face');\n        data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.pages.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        const map: Record<string, string> = {};\n\n        data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute('base'), 10);\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const charNode = char[i];\n            const id = parseInt(charNode.getAttribute('id'), 10);\n\n            let letter = charNode.getAttribute('letter') ?? charNode.getAttribute('char') ?? String.fromCharCode(id);\n\n            if (letter === 'space')letter = ' ';\n\n            map[id] = letter;\n\n            data.chars[letter] = {\n                id,\n                // texture deets..\n                page: parseInt(charNode.getAttribute('page'), 10) || 0,\n                x: parseInt(charNode.getAttribute('x'), 10),\n                y: parseInt(charNode.getAttribute('y'), 10),\n                width: parseInt(charNode.getAttribute('width'), 10),\n                height: parseInt(charNode.getAttribute('height'), 10),\n\n                // render deets..\n                xOffset: parseInt(charNode.getAttribute('xoffset'), 10),\n                yOffset: parseInt(charNode.getAttribute('yoffset'), 10), // + baseLineOffset,\n                xAdvance: parseInt(charNode.getAttribute('xadvance'), 10),\n                kerning: {},\n            } as RawCharData;\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            const first = parseInt(kerning[i].getAttribute('first'), 10);\n            const second = parseInt(kerning[i].getAttribute('second'), 10);\n            const amount = parseInt(kerning[i].getAttribute('amount'), 10);\n\n            data.chars[map[second]].kerning[map[first]] = amount;// * 10000;\n        }\n\n        return data;\n    }\n};\n","import { DOMAdapter } from '../../../environment/adapter';\nimport { bitmapFontXMLParser } from './bitmapFontXMLParser';\n\nimport type { BitmapFontData } from '../AbstractBitmapFont';\n\nexport const bitmapFontXMLStringParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        if (typeof data === 'string' && data.includes('<font>'))\n        {\n            return bitmapFontXMLParser.test(DOMAdapter.get().parseXML(data));\n        }\n\n        return false;\n    },\n\n    parse(data: string): BitmapFontData\n    {\n        return bitmapFontXMLParser.parse(DOMAdapter.get().parseXML(data));\n    }\n};\n","import { LoaderParserPriority } from '../../../assets/loader/parsers/LoaderParser';\nimport { copySearchParams } from '../../../assets/utils/copySearchParams';\nimport { DOMAdapter } from '../../../environment/adapter';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { path } from '../../../utils/path';\nimport { BitmapFont } from '../BitmapFont';\nimport { bitmapFontTextParser } from './bitmapFontTextParser';\nimport { bitmapFontXMLStringParser } from './bitmapFontXMLStringParser';\n\nimport type { Loader } from '../../../assets/loader/Loader';\nimport type { LoaderParser } from '../../../assets/loader/parsers/LoaderParser';\nimport type { ResolvedAsset } from '../../../assets/types';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/** simple loader plugin for loading in bitmap fonts! */\nexport const bitmapFontCachePlugin = {\n    extension: ExtensionType.CacheParser,\n    test: (asset: BitmapFont) => asset instanceof BitmapFont,\n    getCacheableAssets(keys: string[], asset: BitmapFont)\n    {\n        const out: Record<string, BitmapFont> = {};\n\n        keys.forEach((key) =>\n        {\n            out[key] = asset;\n        });\n\n        out[`${asset.fontFamily}-bitmap`] = asset;\n\n        return out;\n    }\n};\n\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(path.extname(url).toLowerCase());\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return bitmapFontTextParser.test(data) || bitmapFontXMLStringParser.test(data);\n    },\n\n    async parse(asset: string, data: ResolvedAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const bitmapFontData = bitmapFontTextParser.test(asset)\n            ? bitmapFontTextParser.parse(asset)\n            : bitmapFontXMLStringParser.parse(asset);\n\n        const { src } = data;\n        const { pages } = bitmapFontData;\n        const textureUrls = [];\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            let imagePath = path.join(path.dirname(src), pageFile);\n\n            imagePath = copySearchParams(imagePath, src);\n\n            textureUrls.push(imagePath);\n        }\n\n        const loadedTextures = await loader.load<Texture>(textureUrls);\n        const textures = textureUrls.map((url) => loadedTextures[url]);\n\n        const bitmapFont = new BitmapFont({\n            data: bitmapFontData,\n            textures\n        }, src);\n\n        return bitmapFont;\n    },\n\n    async load(url: string, _options: ResolvedAsset): Promise<string>\n    {\n        const response = await DOMAdapter.get().fetch(url);\n\n        return await response.text();\n    },\n\n    async unload(bitmapFont: BitmapFont, _resolvedAsset, loader): Promise<void>\n    {\n        await Promise.all(bitmapFont.pages.map((page) => loader.unload(page.texture.source._sourceOrigin)));\n\n        bitmapFont.destroy();\n    }\n} as LoaderParser;\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vColor * calculateMSDFAlpha(outColor, localUniforms.uDistance);\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vColor * calculateMSDFAlpha(outColor, uDistance);\n        `\n\n    }\n};\n","export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                return alpha;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { MAX_TEXTURES } from '../../../rendering/batcher/shared/const';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { batchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/batchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const gpuProgram = compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(MAX_TEXTURES),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(MAX_TEXTURES),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: batchSamplersUniformGroup,\n            }\n        });\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private _sdfShader: SdfShader;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                if (!this._sdfShader)\n                {\n                    this._sdfShader = new SdfShader();\n                }\n\n                context.customShader = this._sdfShader;\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = (style._stroke?.width || 0) / 2;\n\n        currentY += bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        context\n            .translate(\n                (-bitmapText._anchor._x * bitmapTextLayout.width) - padding,\n                (-bitmapText._anchor._y * (bitmapTextLayout.height + bitmapTextLayout.offsetY)) - padding)\n            .scale(scale, scale);\n\n        const tint = style._fill.color;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that hav the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', () =>\n        {\n            this.destroyRenderable(bitmapText);\n        });\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const resolution = bitmapText.resolution ?? this._renderer.resolution;\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale) * resolution;\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._sdfShader?.destroy(true);\n        this._sdfShader = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { bitmapFontCachePlugin, loadBitmapFont } from './asset/loadBitmapFont';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe, loadBitmapFont, bitmapFontCachePlugin);\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HtmlTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        this._gpuText[htmlText.uid] = gpuTextData;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', () =>\n        {\n            this.destroyRenderable(htmlText);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n","import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n","import { Color } from '../../../color/Color';\n\nimport type { StrokeStyle } from '../../graphics/shared/GraphicsContext';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HtmlTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: StrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n","/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillStyleInputs } from '../graphics/shared/GraphicsContext';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillStyleInputs)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: FillStyleInputs)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS(style, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","import { CanvasTextMetrics } from '../../text/canvas/CanvasTextMetrics';\nimport { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData = htmlTextRenderData || tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    const descenderPadding = CanvasTextMetrics.measureFont(style.fontStyle).descent;\n\n    return {\n        width: contentBounds.width,\n        height: contentBounds.height + descenderPadding,\n    };\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HtmlTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        image.width = width | 0;\n        image.height = height | 0;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        let resource: HTMLImageElement | HTMLCanvasElement = image;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            resource = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(resource, image.width, image.height, resolution);\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * This canvas is immediately returned to the CanvasPool for reuse, so use the result straight away!\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): HTMLCanvasElement\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas and context to the CanvasPool.\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n    // Return the canvas.\n    return canvasAndContext.canvas as HTMLCanvasElement;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern';\n\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { ConvertedFillStyle } from '../../../graphics/shared/GraphicsContext';\n\nexport function getCanvasFillStyle(\n    fillStyle: ConvertedFillStyle,\n    context: ICanvasRenderingContext2D): string | CanvasGradient | CanvasPattern\n{\n    if (fillStyle.texture === Texture.WHITE && !fillStyle.fill)\n    {\n        return Color.shared.setValue(fillStyle.color).toHex();\n    }\n    else if (!fillStyle.fill)\n    {\n        // fancy set up...\n        const pattern = context.createPattern(fillStyle.texture.source.resource, 'repeat');\n\n        // create an inverted scale matrix..\n        const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n\n        tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillPattern)\n    {\n        const fillPattern = fillStyle.fill as FillPattern;\n\n        const pattern = context.createPattern(fillPattern.texture.source.resource, 'repeat');\n\n        const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n\n        tempMatrix.scale(\n            fillPattern.texture.frame.width,\n            fillPattern.texture.frame.height\n        );\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    else if (fillStyle.fill instanceof FillGradient)\n    {\n        const fillGradient = fillStyle.fill as FillGradient;\n\n        if (fillGradient.type === 'linear')\n        {\n            const gradient = context.createLinearGradient(\n                fillGradient.x0,\n                fillGradient.y0,\n                fillGradient.x1,\n                fillGradient.y1\n            );\n\n            fillGradient.gradientStops.forEach((stop) =>\n            {\n                gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n            });\n\n            return gradient;\n        }\n    }\n\n    // #if _DEBUG\n    warn('FillStyle not recognised', fillStyle);\n    // #endif\n\n    return 'red';\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            const resolution = text.resolution ?? this._renderer.resolution;\n\n            const { width, height } = this._renderer.canvasText.getTextureSize(\n                text.text,\n                resolution,\n                text._style,\n            );\n\n            if (\n                // is only being used by this text:\n                this._renderer.canvasText.getReferenceCount(gpuText.currentKey) === 1\n                // check the size of the text is the same po2\n                && width === gpuText.texture._source.width\n                && height === gpuText.texture._source.height\n            )\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, _instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        const padding = text._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, text._anchor, batchableSprite.texture, padding);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        const resolution = text.resolution ?? this._renderer.resolution;\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getTexture(\n            text.text,\n            resolution,\n            text._style,\n            text._getKey()\n        );\n\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', () =>\n        {\n            this.destroyRenderable(text);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n","import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n","import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { TextStyle } from '../TextStyle';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string)\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n            TexturePool.returnTexture(activeTexture.texture);\n\n            const source = activeTexture.texture.source;\n\n            source.resource = null;\n            source.uploadMethodId = 'unknown';\n            source.alphaMode = 'no-premultiply-alpha';\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n\n        context.scale(resolution, resolution);\n\n        context.clearRect(0, 0, measured.width + 4, measured.height + 4);\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.globalAlpha = style._fill?.alpha ?? 1;\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context) : null;\n\n                if (style._stroke?.width)\n                {\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n"],"names":["ResizePlugin","init","options","Object","defineProperty","this","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","renderer","render","resizeTo","destroy","extension","ExtensionType","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","add","UPDATE_PRIORITY","LOW","stop","start","Ticker","shared","oldTicker","extensions","FilterPipe","constructor","_renderer","push","filterEffect","container","instructionSet","renderPipes","batch","break","renderPipeId","canBundle","action","pop","_filterEffect","_container","execute","instruction","filter","type","WebGLPipes","WebGPUPipes","CanvasPipes","name","tempMatrix","Matrix","getFastGlobalBounds","target","bounds","clear","_getGlobalBoundsRecursive","isValid","isRenderGroupRoot","applyMatrix","renderGroup","localTransform","worldTransform","localDisplayStatus","measurable","manageEffects","effects","length","localBounds","boundsPool","boundsArea","addRect","viewBounds","addFrame","minX","minY","maxX","maxY","groupTransform","children","i","advanced","addBounds","copyTo","invert","relativeGroupTransform","return","quadGeometry","Geometry","attributes","aPosition","buffer","Float32Array","location","format","stride","offset","indexBuffer","Uint32Array","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","UniformGroup","uInputSize","value","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_this$_activeFilterDa","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","matrix","renderable","globalDisplayStatus","getGlobalRenderableBounds","filterArea","colorTextureSource","renderTarget","rootRenderTarget","colorTexture","source","resolution","_resolution","padding","antialias","blendRequired","enabled","_renderer$backBuffer$","_renderer$backBuffer","Math","min","compatibleRenderers","backBuffer","useBackBuffer","warn","viewPort","rootViewPort","scale","fitBounds","pad","ceil","isPositive","previousRenderSurface","renderSurface","inputTexture","TexturePool","getOptimalTexture","bind","globalUniforms","Texture","EMPTY","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","style","apply","returnTexture","flip","flop","t","lastRenderSurface","backgroundResolution","x","y","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","currentIndex","filterUniforms","uniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","frame","pixelWidth","pixelHeight","rootTexture","isRoot","update","uniformBatch","batchUniforms","getUboResource","groups","encoder","draw","geometry","shader","state","_state","topology","RendererType","WEBGL","Bounds","calculateSpriteMatrix","outputMatrix","sprite","data","mappedMatrix","_source","prepend","texture","translate","anchor","WebGLSystem","WebGPUSystem","sampleValues","Int32Array","MAX_TEXTURES","batchSamplersUniformGroup","uTextures","size","isStatic","CanvasPool","canvasOptions","_canvasPool","create","enableFullScreen","_createCanvasAndContext","canvas","DOMAdapter","createCanvas","context","getContext","getOptimalCanvasAndContext","minWidth","minHeight","arguments","undefined","key","nextPow2","canvasAndContext","returnCanvasAndContext","GraphicsPipe","adaptor","State","for2d","_graphicsBatchesHash","_adaptor","validateRenderable","graphics","wasBatched","uid","gpuContext","graphicsContext","updateGpuContext","isBatchable","addRenderable","_didGraphicsUpdate","_rebuild","_addToBatcher","updateRenderable","batches","batcher","updateElement","destroyRenderable","_removeBatchForRenderable","isRenderable","getGpuContext","customShader","blendMode","groupBlendMode","localUniforms","resources","uTransformMatrix","uRound","_roundPixels","color32BitToUniform","groupColorAlpha","uColor","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","addToBatch","roundPixels","map","batchClone","BigPool","BatchableGraphics","on","graphicsUid","forEach","GraphicsContextSystem","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","indices","indexSize","positions","vertexSize","batchableMesh","_getBatchableMesh","checkAndUpdateTexture","gpuBatchableMesh","_texture","gpuMesh","_ref","_initMeshData","_mesh$_geometry$indic","_mesh$_geometry$posit","_initBatchableMesh","BatchableMesh","_uvUpdateId","_textureMatrixUpdateId","reset","packIndex","index","indicesOffset","packAttributes","float32View","uint32View","textureId","wt","textureIdAndRound","a","b","c","d","tx","ty","uvBuffer","getBuffer","uvs","transformedUvs","textureMatrix","isSimple","_transformedUvs","_updateID","multiplyUvs","abgr","_MeshGeometry","deprecation","v8_0_0","defaultOptions","shrinkToFit","shrinkBuffersToFit","Buffer","label","usage","BufferUsage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshGeometry","_PlaneGeometry","super","verticesX","verticesY","build","_this$verticesX","_this$verticesY","_this$width","_this$height","total","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_options$width","_options$height","_options$originalWidt","_options$originalHeig","_options$leftWidth","_options$rightWidth","_options$topHeight","_options$bottomHeight","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","updateUvs","updatePositions","w","scaleW","h","scaleH","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","_instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","batchableSprite","_initGPUSprite","tilingBit","vertex","header","main","fragment","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","_gpuProgram","_glProgram","compileHighShaderGpuProgram","bits","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","uMapCoord","uClampFrame","uClampOffset","uTextureTransform","uSizeAnchor","uTexture","uSampler","updateUniforms","anchorX","anchorY","textureWidth","textureHeight","mapCoord","QuadGeometry","sharedQuad","TilingSpritePipe","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","tilingSprite","_didTilingSpriteUpdate","_updateBatchableMesh","bindGroup","default2d","_tileTransform","_tilingSpriteData$sha","_initTilingSpriteData","slice","renderableData","addressMode","_applyAnchorToTexture","copyFrom","array","setUvs","setPositions","_nonPowOf2wrapping","supports","nonPowOf2wrapping","isPowerOfTwo","AbstractBitmapFont","EventEmitter","chars","lineHeight","fontFamily","fontMetrics","fontSize","ascent","descent","baseLineOffset","distanceField","range","pages","baseMeasurementFontSize","baseRenderedFontSize","font","pageTextures","distanceFieldRange","distanceFieldType","destroyTextures","emit","removeAllListeners","page","resolveCharacters","result","j","item","Array","isArray","Error","concat","startCode","charCodeAt","endCode","i2","j2","String","fromCharCode","from","DynamicBitmapFont","_dynamicOptions$skipK","_dynamicOptions$resol","_dynamicOptions$paddi","_padding","_measureCache","_currentChars","_currentX","_currentY","_currentPageIndex","_skipKerning","dynamicOptions","clone","overrideFill","_fill","color","alpha","WHITE","fill","requestedFontSize","fontStringFromTextStyle","overrideSize","_stroke","_style","skipKerning","CanvasTextMetrics","measureFont","ensureCharacters","charList","char","includes","self","indexOf","pageData","_nextPage","textureSource","currentX","currentY","fontScale","widthScale","fontStyle","maxCharHeight","skipTexture","_style$dropShadow$dis","_style$dropShadow","_style$_stroke$width","_style$_stroke","metrics","measureText","paddedWidth","paddedHeight","max","pageData2","xAdvance","dropShadow","distance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","Rectangle","_applyKerning","newChars","measureCache","first","second","c1","c2","amount","textureResolution","_setupContext","ImageSource","resource","alphaMode","_stroke$width","textBaseline","stroke","strokeThickness","lineWidth","lineJoin","join","miterLimit","strokeStyle","getCanvasFillStyle","fillStyle","shadowOptions","rgb","Color","setValue","toArray","dropShadowBlur","blur","dropShadowDistance","shadowColor","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_stroke$width2","text","fontProperties","strokeText","fillText","getBitmapTextLayout","layoutData","offsetY","lines","charPositions","spaceWidth","spacesIndex","currentLine","previousChar","firstWord","currentWord","spaceWord","nextWord","word","position","nextLine","lastChar","adjustedLetterSpacing","letterSpacing","adjustedWordWrapWidth","wordWrapWidth","isEnd","charData","test","wordWrap","nextCharWidth","align","measurementData","line","alignCenter","alignRight","indy","spaceIndex","totalSpaces","alignJustify","BitmapFontManager","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","getFont","_dynamicFont$ensureCh","fontFamilyKey","Cache","has","fnt","once","dynamicFont","call","getLayout","bitmapFont","split","install","_options","_ref2","_ref3","_ref4","textStyle","TextStyle","flatChars","uninstall","cacheKey","BitmapFont","url","_data$distanceField","textures","keys","parseInt","_charData$kerning","frameReal","bitmapFontTextParser","startsWith","parse","txt","_rawData$distanceFiel","items","match","rawData","info","common","kernings","attributeList","itemData","strValue","replace","floatValue","parseFloat","isNaN","distanceRange","fieldType","face","file","base","_charNode$letter","charNode","letter","xoffset","yoffset","xadvance","bitmapFontXMLParser","xml","getElementsByTagName","getAttribute","_charNode$getAttribut","bitmapFontXMLStringParser","parseXML","validExtensions","bitmapFontCachePlugin","CacheParser","asset","getCacheableAssets","out","loadBitmapFont","LoadParser","priority","LoaderParserPriority","Normal","path","extname","toLowerCase","async","loader","bitmapFontData","src","textureUrls","pageFile","imagePath","dirname","copySearchParams","loadedTextures","load","response","fetch","unload","_resolvedAsset","Promise","all","_sourceOrigin","localUniformMSDFBit","end","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_didTextUpdate","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","_sdfShader","bitmapTextLayout","_anchor","_x","_y","tint","round","initGpuText","proxyRenderable","Graphics","_bitmapText$resolutio","dx","sqrt","dy","worldScale","abs","_this$_sdfShader","proxy","groupColor","groupAlpha","HTMLTextPipe","_gpuText","htmlText","gpuText","_getGpuText","newKey","_getKey","textureNeedsUploading","currentKey","_updateText","_destroyRenderableById","htmlTextUid","decreaseReferenceCount","_updateGpuText","catch","e","console","error","updateQuadBounds","_htmlText$resolution","generatingTexture","getManagedTexture","onViewUpdate","gpuTextData","BatchableSprite","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","image","Image","setAttribute","overflow","appendChild","textStyleToCSS","cssStyleString","toHex","fontWeight","fontVariant","whiteSpace","breakWords","strokeToCSS","dropShadowToCSS","cssOverrides","cssStyles","tagStyles","tagStyle","cssTagStyle","transform","templates","tagStyleToCSS","dropShadowStyle","setAlpha","toHexa","HTMLTextStyle","_this$cssOverrides","_options$tagStyles","_cssOverrides","_generateKey","_styleKey","generateTextStyleKey","_cssStyle","cssStyle","addOverride","_len","_key","toAdd","v","removeOverride","_len2","_key2","toRemove","loadFontCSS","dataSrc","blob","reader","FileReader","resolve","reject","onloadend","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_activeTextures","_createCanvas","WEBGPU","getTexture","_buildTexturePromise","textKey","_increaseReferenceCount","promise","then","usageCount","htmlTextData","fontFamilies","dedupe","matches","addFontFamily","fontFamily2","trim","extractFontFamilies","fontCSS","fontPromises","getFontCss","defaultTextStyle","measured","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","descenderPadding","measureHtmlText","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","resolve2","setTimeout","onload","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","isSafari","clearRect","drawImage","getTemporaryCanvasFromImage","getPo2TextureFromSource","initSource","activeTexture","_cleanUp","uploadMethodId","getReferenceCount","CanvasSystem","defaultFontOptions","pattern","createPattern","setTransform","FillPattern","fillPattern","FillGradient","fillGradient","gradient","createLinearGradient","x0","y0","x1","y1","gradientStops","addColorStop","CanvasTextPipe","_text$resolution","canvasText","getTextureSize","textUid","_text$resolution2","checkRow","checkColumn","top","bottom","CanvasTextSystem","renderTextToCanvas","trimmed","willReadFrequently","TypeError","getImageData","left","right","getCanvasBoundingBox","lineWidths","maxLineWidth","resetTransform","lineCap","cap","linePositionX","linePositionY","passesCount","_style$_stroke3","isShadowPass","dsOffsetText","dsOffsetShadow","dropShadowColor","dropShadowAlpha","toRgbaString","_style$_fill$alpha","_style$_fill","_style$_stroke2","globalAlpha","linePositionYShift","strokeWidth","_drawLetterSpacing","isStroke","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","tempBounds"],"sourceRoot":""}